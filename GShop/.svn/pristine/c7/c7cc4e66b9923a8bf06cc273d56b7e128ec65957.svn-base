package controller;

import static org.hamcrest.CoreMatchers.instanceOf;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import logic.AdminCatalog;
import model.AdminCondition;
import model.Charge;
import model.Game;
import model.Order;
import model.User;

@Controller
public class AdminController {
	
	@Autowired
	private AdminCatalog adminCatalog;
	
	// 관리자 페이지
	@RequestMapping(value="/admin/adminPage.html", method=RequestMethod.GET)
	public ModelAndView gotoAdminPage(){
		System.out.println("gotoAdminPage");
		
		ModelAndView mav = new ModelAndView("gshop/admin/adminPage");
		
		return mav;
	}
	
	// 충전관리 페이지
	@RequestMapping(value="/admin/chargeManagement.html", method=RequestMethod.GET)
	public ModelAndView gotoChargeManagement(Integer PAGENO,String ID, Integer AMOUNT){
		System.out.println("gotoChargeManagement");
		
		ModelAndView mav = new ModelAndView("gshop/admin/chargeManagement");
		
		System.out.println("ID "+ID);
		System.out.println("AMOUNT "+AMOUNT);
		
		//------------ 페이지 번호 처리
		Integer cnt = this.adminCatalog.getChargeCountAll();
		
		int pageCnt = 0;
		
		if(cnt==null){
			cnt=0;
		}else{
			pageCnt=cnt /5;
			if(cnt%5>0){
				pageCnt++;
			}
		}
		mav.addObject("COUNT",pageCnt);
		// page num end
		
		//페이지 첫번호 ~ 끝번호 계산
		int currentPage=0;
		
		if(PAGENO==null){
			currentPage =1;
		}else{
			currentPage = PAGENO;
		}
		
		int startRow = 0;
		int endRow = 0;
		
		startRow = (currentPage-1)*5+1;
		endRow = currentPage *5;
		
		if(endRow > cnt){
			endRow = cnt;
		}
		
		AdminCondition c = new AdminCondition();
		
		c.setStartRow(startRow);
		c.setEndRow(endRow);
		// page fist num~ end num end
		
		// 목록 보여주기 위한 쿼리 실행		
		List<Charge> chargeAll = this.adminCatalog.findChargeListAll(c);
		
		mav.addObject("CHARGE_ALL",chargeAll);
		
		mav.addObject("/admin/chargeManagement");
				
		return mav;
	}
	
	@RequestMapping(value="/admin/chargeManagementSearch.html", method=RequestMethod.POST)
	public ModelAndView gotoChargeManagementSearch(Integer PAGENO,String input, Integer search){
		System.out.println("gotoChargeManagementSearch");
		
		ModelAndView mav = new ModelAndView("gshop/admin/chargeManagement");
		
		if(search==0){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getChargeCountForId(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setUser_id(input);
			
			List<Charge> chargeId = this.adminCatalog.findChargeListForId(c);
			mav.addObject("CHARGE_ID",chargeId);
			mav.addObject("input",input);
			mav.addObject("search",search);
			
			
		}else if(search==1){
			//------------ 페이지 번호 처리
			Integer cash = Integer.valueOf(input);
			Integer cnt = this.adminCatalog.getChargeCountForAmount(cash);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setTotal_amount(cash);
			
			List<Charge> chargeAmount = this.adminCatalog.findChargeListForAmount(c);
			mav.addObject("CHARGE_AMOUNT",chargeAmount);
			mav.addObject("input",input);
			mav.addObject("search",search);
		}
		
		mav.addObject("/admin/chargeManagementSearch");
				
		return mav;
	}
	
	@RequestMapping(value="/admin/chargeManagementSearch.html", method=RequestMethod.GET)
	public ModelAndView gotoChargeManagementSearchGet(Integer PAGENO,String INPUT, Integer SEARCH) throws UnsupportedEncodingException{
		System.out.println("gotoChargeManagementSearchGet");
		
		ModelAndView mav = new ModelAndView("gshop/admin/chargeManagement");
		
		String input = new String(INPUT.getBytes("ISO-8859-1"),"UTF-8");
		System.out.println("input "+input);
		
		if(SEARCH==0){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getChargeCountForId(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setUser_id(input);
			
			
			List<Charge> chargeId = this.adminCatalog.findChargeListForId(c);
			mav.addObject("CHARGE_ID",chargeId);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
			
		}else if(SEARCH==1){
			//------------ 페이지 번호 처리
			Integer cash = Integer.valueOf(INPUT);
			Integer cnt = this.adminCatalog.getChargeCountForAmount(cash);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setTotal_amount(cash);
			
			List<Charge> chargeAmount = this.adminCatalog.findChargeListForAmount(c);
			mav.addObject("CHARGE_AMOUNT",chargeAmount);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
		}
		
		mav.addObject("/admin/chargeManagementSearch");
				
		return mav;
	}
	
	// 게임관리 페이지
	@RequestMapping(value="/admin/gameManagement.html", method=RequestMethod.GET)
	public ModelAndView gotoGameManagement(Integer PAGENO){
		System.out.println("gotoGameManagement");
		
		ModelAndView mav = new ModelAndView("gshop/admin/gameManagement");
		
		//------------ 페이지 번호 처리
		Integer cnt = this.adminCatalog.getGameCountAll();
		
		int pageCnt = 0;
		
		if(cnt==null){
			cnt=0;
		}else{
			pageCnt=cnt /5;
			if(cnt%5>0){
				pageCnt++;
			}
		}
		mav.addObject("COUNT",pageCnt);
		// page num end
		
		//페이지 첫번호 ~ 끝번호 계산
		int currentPage=0;
		
		if(PAGENO==null){
			currentPage =1;
		}else{
			currentPage = PAGENO;
		}
		
		int startRow = 0;
		int endRow = 0;
		
		startRow = (currentPage-1)*5+1;
		endRow = currentPage *5;
		
		if(endRow > cnt){
			endRow = cnt;
		}
		
		AdminCondition c = new AdminCondition();
		
		c.setStartRow(startRow);
		c.setEndRow(endRow);
		// page fist num~ end num end
		
		// 목록 보여주기 위한 쿼리 실행		
		List<Game> gameAll = this.adminCatalog.findGameListAll(c);
		
		mav.addObject("GAME_ALL",gameAll);
		for(Game g : gameAll){
			System.out.println("g.getGenre_name() "+g.getGenre_name());
		}
		mav.addObject("/admin/gameManagement");
				
		return mav;
	}
	
	@RequestMapping(value="/admin/gameManagementSearch.html", method=RequestMethod.POST)
	public ModelAndView gotoGameManagementSearch(Integer PAGENO, String input, Integer search){
		System.out.println("gotoGameManagementSearch");
		
		ModelAndView mav = new ModelAndView("gshop/admin/gameManagement");
		
		if(search==0){
			//------------ 페이지 번호 처리
			System.out.println("input1:["+input+"]");
			Integer cnt = this.adminCatalog.getGameCountForGameName(input);
			System.out.println("AdminController gotoGameManagementSearch gameName count "+ cnt);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			c.setGame_name(input);
			
			// 목록 보여주기 위한 쿼리 실행		
			List<Game> gameAll = this.adminCatalog.findGameListForName(c);
			
			mav.addObject("GAME_GAMENAME",gameAll);
			mav.addObject("input",input);
			mav.addObject("search",search);
			
		}else if(search==1){
			//------------ 페이지 번호 처리
			System.out.println("input2:["+input+"]");
			Integer cnt = this.adminCatalog.getGameCountForGenreName(input);
			System.out.println("AdminController gotoGameManagementSearch genreName count "+ cnt);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			c.setGenre_name(input);
			
			// 목록 보여주기 위한 쿼리 실행		
			List<Game> gameAll = this.adminCatalog.findGameListForCategory(c);
			
			mav.addObject("GAME_CATEGORY",gameAll);
			mav.addObject("input",input);
			mav.addObject("search",search);
			
		}else if(search==2){
			//------------ 페이지 번호 처리
			Integer cash=Integer.valueOf(input);
			Integer cnt = this.adminCatalog.getGameCountForDiscountRate(cash);
			System.out.println("AdminController gotoGameManagementSearch amount count "+ cnt);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			c.setDiscount_rate(cash);
			
			// 목록 보여주기 위한 쿼리 실행		
			List<Game> gameAll = this.adminCatalog.findGameListForDiscountRate(c);
			
			mav.addObject("GAME_DISCOUNTRATE",gameAll);
			mav.addObject("input",input);
			mav.addObject("search",search);
			
		}
		
		mav.addObject("/admin/gameManagementSearch");
		
		return mav;
	}
	
	@RequestMapping(value="/admin/gameManagementSearch.html", method=RequestMethod.GET)
	public ModelAndView gotoGameManagementSearchGet(Integer PAGENO, String INPUT, Integer SEARCH) throws UnsupportedEncodingException{
		System.out.println("gotoGameManagementSearchGet");
		
		ModelAndView mav = new ModelAndView("gshop/admin/gameManagement");
		
		String input = new String(INPUT.getBytes("ISO-8859-1"),"UTF-8");
		System.out.println("input "+input);
		
		if(SEARCH==0){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getGameCountForGameName(input);
			System.out.println("input3:["+input+"]");
			System.out.println("AdminController gotoGameManagementSearchGet gameName count "+ cnt);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			c.setGame_name(input);
			
			// 목록 보여주기 위한 쿼리 실행		
			List<Game> gameAll = this.adminCatalog.findGameListForName(c);
			
			mav.addObject("GAME_GAMENAME",gameAll);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
			
		}else if(SEARCH==1){
			//------------ 페이지 번호 처리
			System.out.println("input:["+input+"]");
			Integer cnt = this.adminCatalog.getGameCountForGenreName(input);
			System.out.println("AdminController gotoGameManagementSearchGet genreName count "+ cnt);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			c.setGenre_name(input);
			
			// 목록 보여주기 위한 쿼리 실행		
			List<Game> gameAll = this.adminCatalog.findGameListForCategory(c);
			
			mav.addObject("GAME_CATEGORY",gameAll);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
			
		}else if(SEARCH==2){
			//------------ 페이지 번호 처리
			Integer cash=Integer.valueOf(input);
			Integer cnt = this.adminCatalog.getGameCountForDiscountRate(cash);
			System.out.println("AdminController gotoGameManagementSearchGet amount count "+ cnt);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			c.setDiscount_rate(cash);
			
			// 목록 보여주기 위한 쿼리 실행		
			List<Game> gameAll = this.adminCatalog.findGameListForDiscountRate(c);
			
			mav.addObject("GAME_DISCOUNTRATE",gameAll);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
			
		}
		
		mav.addObject("/admin/gameManagementSearch");
		
		return mav;
	}
	
	// 회원관리 페이지
	@RequestMapping(value="/admin/memberManagement.html", method=RequestMethod.GET)
	public ModelAndView gotoMemberManagement(Integer PAGENO){
		System.out.println("gotoMemberManagement");
		
		ModelAndView mav = new ModelAndView("gshop/admin/memberManagement");

		//------------ 페이지 번호 처리
		Integer cnt = this.adminCatalog.getMemberCountAll();
		
		int pageCnt = 0;
		
		if(cnt==null){
			cnt=0;
		}else{
			pageCnt=cnt /5;
			if(cnt%5>0){
				pageCnt++;
			}
		}
		mav.addObject("COUNT",pageCnt);
		// page num end
		
		//페이지 첫번호 ~ 끝번호 계산
		int currentPage=0;
		
		if(PAGENO==null){
			currentPage =1;
		}else{
			currentPage = PAGENO;
		}
		
		int startRow = 0;
		int endRow = 0;
		
		startRow = (currentPage-1)*5+1;
		endRow = currentPage *5;
		
		if(endRow > cnt){
			endRow = cnt;
		}
		
		AdminCondition c = new AdminCondition();
		
		c.setStartRow(startRow);
		c.setEndRow(endRow);
		// page fist num~ end num end
		
		// 목록 보여주기 위한 쿼리 실행		
		List<User> userAll = this.adminCatalog.findMemberListAll(c);
		
		mav.addObject("USER_ALL",userAll);
		
		mav.addObject("/admin/memberManagement");
		
		return mav;
	}
	
	@RequestMapping(value="/admin/memberManagementSearch.html", method=RequestMethod.POST)
	public ModelAndView gotoMemberManagementSearch(Integer PAGENO, String input, Integer search){
		System.out.println("gotoMemberManagementSearch");
		
		ModelAndView mav = new ModelAndView("gshop/admin/memberManagement");
	
		if(search==0){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getMemberCountForId(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행	
			
			c.setUser_id(input);
			
			List<User> userId = this.adminCatalog.findMemberForId(c);
			mav.addObject("USER_ID1",userId);
			mav.addObject("input",input);
			mav.addObject("search",search);
			
		}else if(search==1){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getMemberCountForNickName(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setNickname(input);
			
			List<User> userNickname = this.adminCatalog.findMemberForNickName(c);
			mav.addObject("USER_NICKNAME",userNickname);
			mav.addObject("input",input);
			mav.addObject("search",search);
			
		}else if(search==2){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getMemberCountForEmail(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setEmail(input);
			
			List<User> userEmail = this.adminCatalog.findMemberForEmail(c);
			mav.addObject("USER_EMAIL",userEmail);
			mav.addObject("input",input);
			mav.addObject("search",search);
		}
	
		mav.addObject("/admin/memberManagementSearch");
		
		return mav;
	}
	
	@RequestMapping(value="/admin/memberManagementSearch.html", method=RequestMethod.GET)
	public ModelAndView gotoMemberManagementSearchGet(Integer PAGENO, String INPUT, Integer SEARCH) throws UnsupportedEncodingException{
		System.out.println("gotoMemberManagementSearchGet");
		
		ModelAndView mav = new ModelAndView("gshop/admin/memberManagement");
	
		String input = new String(INPUT.getBytes("ISO-8859-1"),"UTF-8");
		System.out.println("input "+input);
		
		if(SEARCH==0){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getMemberCountForId(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행	
			
			c.setUser_id(input);
			
			List<User> userId = this.adminCatalog.findMemberForId(c);
			mav.addObject("USER_ID1",userId);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
			
		}else if(SEARCH==1){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getMemberCountForNickName(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setNickname(input);
			
			List<User> userNickname = this.adminCatalog.findMemberForNickName(c);
			mav.addObject("USER_NICKNAME",userNickname);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
			
		}else if(SEARCH==2){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getMemberCountForEmail(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setEmail(input);
			
			List<User> userEmail = this.adminCatalog.findMemberForEmail(c);
			mav.addObject("USER_EMAIL",userEmail);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
		}
	
		mav.addObject("/admin/memberManagementSearch");
		
		return mav;
	}
	
	@RequestMapping(value="/admin/userMyPage.html", method=RequestMethod.GET)
	public ModelAndView findUserPage(String USER, String NICK) throws UnsupportedEncodingException{
		System.out.println("findUserPage");
		
		String userId = new String(USER.getBytes("ISO-8859-1"),"UTF-8");
		String userNick = new String(NICK.getBytes("ISO-8859-1"),"UTF-8");
		
		System.out.println("USER "+userId);
		System.out.println("NICK "+userNick);
		
		User user = new User();
		
		user.setUser_id(userId);
		user.setNickname(userNick);
		
		User user1 = this.adminCatalog.findUser(user);
		
		ModelAndView mav = new ModelAndView("gshop/user/userMyPageResult");
		mav.addObject("USER",user1);
		
		return mav;
		
	}
	
	// 구매정보 페이지
	@RequestMapping(value="/admin/purchaseManagement.html", method=RequestMethod.GET)
	public ModelAndView gotopurchaseManagement(Integer PAGENO){
		System.out.println("gotopurchaseManagement");
		
		ModelAndView mav = new ModelAndView("gshop/admin/purchaseManagement");
		
		//------------ 페이지 번호 처리
		Integer cnt = this.adminCatalog.getPurchaseCountAll();
		
		int pageCnt = 0;
		
		if(cnt==null){
			cnt=0;
		}else{
			pageCnt=cnt /5;
			if(cnt%5>0){
				pageCnt++;
			}
		}
		mav.addObject("COUNT",pageCnt);
		// page num end
		
		//페이지 첫번호 ~ 끝번호 계산
		int currentPage=0;
		
		if(PAGENO==null){
			currentPage =1;
		}else{
			currentPage = PAGENO;
		}
		
		int startRow = 0;
		int endRow = 0;
		
		startRow = (currentPage-1)*5+1;
		endRow = currentPage *5;
		
		if(endRow > cnt){
			endRow = cnt;
		}
		
		AdminCondition c = new AdminCondition();
		
		c.setStartRow(startRow);
		c.setEndRow(endRow);
		// page fist num~ end num end
		
		// 목록 보여주기 위한 쿼리 실행		
		List<Order> orderAll = this.adminCatalog.findPurchaseListAll(c);		
		
		mav.addObject("ORDER_ALL",orderAll);
		
		mav.addObject("/admin/purchaseManagement");
		
		return mav;
	}
	
	@RequestMapping(value="/admin/purchaseManagementSearch.html", method=RequestMethod.POST)
	public ModelAndView gotopurchaseManagementSearch(Integer PAGENO, String input, Integer search){
		System.out.println("gotopurchaseManagementSearch");
		
		ModelAndView mav = new ModelAndView("gshop/admin/purchaseManagement");
		
		if(search==0){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getPurchaseCountForId(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setUser_id(input);
			
			List<Order> orderId = this.adminCatalog.findPurchaseForId(c);
			mav.addObject("ORDER_ID",orderId);
			for(Order o : orderId){
				System.out.println("getGame_name() "+o.getGame_name());
			}
			mav.addObject("input",input);
			mav.addObject("search",search);
			
		}else if(search==1){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getPurchaseCountForGameName(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setGame_name(input);
			
			List<Order> orderGamename = this.adminCatalog.findPurchaseForGameName(c);
			mav.addObject("ORDER_GAMENAME",orderGamename);
			mav.addObject("input",input);
			mav.addObject("search",search);
			
		}else if(search==2){
			//------------ 페이지 번호 처리
			Integer cash = Integer.valueOf(input);
			Integer cnt = this.adminCatalog.getPurchaseCountForAmount(cash);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			Integer price = Integer.valueOf(input);
			c.setTotal_amount(price);
			
			List<Order> orderAmount = this.adminCatalog.findPurchaseForAmount(c);
			mav.addObject("ORDER_AMOUNT",orderAmount);
			mav.addObject("input",input);
			mav.addObject("search",search);
			
		}
		
		mav.addObject("/admin/purchaseManagementSearch");
		
		return mav;
	}
	
	@RequestMapping(value="/admin/purchaseManagementSearch.html", method=RequestMethod.GET)
	public ModelAndView gotopurchaseManagementSearchGet(Integer PAGENO, String INPUT, Integer SEARCH) throws UnsupportedEncodingException{
		System.out.println("gotopurchaseManagementSearchGet");
		
		ModelAndView mav = new ModelAndView("gshop/admin/purchaseManagement");
		
		String input = new String(INPUT.getBytes("ISO-8859-1"),"UTF-8");
		System.out.println("input "+input);
		
		if(SEARCH==0){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getPurchaseCountForId(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setUser_id(input);
			
			List<Order> orderId = this.adminCatalog.findPurchaseForId(c);
			mav.addObject("ORDER_ID",orderId);
			for(Order o : orderId){
				System.out.println("getGame_name() "+o.getGame_name());
			}
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
			
		}else if(SEARCH==1){
			//------------ 페이지 번호 처리
			Integer cnt = this.adminCatalog.getPurchaseCountForGameName(input);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			c.setGame_name(input);
			
			List<Order> orderGamename = this.adminCatalog.findPurchaseForGameName(c);
			mav.addObject("ORDER_GAMENAME",orderGamename);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
			
		}else if(SEARCH==2){
			//------------ 페이지 번호 처리
			Integer cash = Integer.valueOf(input);
			Integer cnt = this.adminCatalog.getPurchaseCountForAmount(cash);
			
			int pageCnt = 0;
			
			if(cnt==null){
				cnt=0;
			}else{
				pageCnt=cnt /5;
				if(cnt%5>0){
					pageCnt++;
				}
			}
			mav.addObject("COUNT",pageCnt);
			// page num end
			
			//페이지 첫번호 ~ 끝번호 계산
			int currentPage=0;
			
			if(PAGENO==null){
				currentPage =1;
			}else{
				currentPage = PAGENO;
			}
			
			int startRow = 0;
			int endRow = 0;
			
			startRow = (currentPage-1)*5+1;
			endRow = currentPage *5;
			
			if(endRow > cnt){
				endRow = cnt;
			}
			
			AdminCondition c = new AdminCondition();
			
			c.setStartRow(startRow);
			c.setEndRow(endRow);
			// page fist num~ end num end
			
			// 목록 보여주기 위한 쿼리 실행
			
			Integer price = Integer.valueOf(input);
			c.setTotal_amount(price);
			
			List<Order> orderAmount = this.adminCatalog.findPurchaseForAmount(c);
			mav.addObject("ORDER_AMOUNT",orderAmount);
			mav.addObject("input",input);
			mav.addObject("search",SEARCH);
			
		}
		
		mav.addObject("/admin/purchaseManagementSearch");
		
		return mav;
	}
	
}
