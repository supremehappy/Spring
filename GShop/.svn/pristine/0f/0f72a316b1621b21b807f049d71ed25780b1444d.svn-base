package controller;

import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import logic.GameCatalog;
import model.Condition;
import model.Game;
import model.Genre;
import model.Grade;
import model.Os;

@Controller
public class GameController {
	
	@Autowired
	private GameCatalog gameCatalog;
	
	@RequestMapping(value="/game/updateGame.html", method=RequestMethod.POST)
	public ModelAndView updateGame(@Valid Game game, BindingResult result, HttpSession session) {
		if (result.getErrorCount() > 0) {
			ModelAndView mav = new ModelAndView("gshop/game/gameInputForm");
			mav.getModel().putAll(result.getModel());
			List<Os> osList = this.gameCatalog.getOsList();
			List<Genre> genreList = this.gameCatalog.getGenreList();
			List<Grade> gradeList = this.gameCatalog.getGradeList();
			Map<String, Object> model = new HashMap<String, Object>();
			model.put("OS_LIST", osList);
			model.put("GENRE_LIST", genreList);
			model.put("GRADE_LIST", gradeList);
			mav.addObject(new Game());
			mav.addAllObjects(model);
			return mav;
		}
		
		ModelAndView mav = new ModelAndView();
		if(session.getAttribute("admin_key") == null) {
			mav.addObject("/login/loginForm.html");
			return mav;
		}
		else {
			String[] fileName = null;
			MultipartFile[] multiFile = null;
			for(int index = 0; index < 5; index++) {
				multiFile = game.getImage();
				fileName = new String[5];
				String path = null;
				OutputStream out = null;
				ServletContext context = session.getServletContext();
				if(multiFile != null) {
					fileName[index] = multiFile[index].getOriginalFilename();
					if(! fileName[index].equals("")) {
						String[] arr = fileName[index].split("\\.", 0);
						fileName[index] = game.getGame_id() + "_" + getRandomString() + "." + arr[arr.length - 1];
					}
					path = context.getRealPath("/upload/game/" + fileName[index]);
					try{
						out = new FileOutputStream(path);
						BufferedInputStream bis = new BufferedInputStream(multiFile[index].getInputStream());
						byte[] buffer = new byte[8106];
						int read = 0;
						while( (read = bis.read(buffer))>0 ) {
							out.write(buffer, 0, read);
						}
						if(out != null) {
							out.close();
						}
					}
					catch(Exception e) {}
					if(index < 1) {					
						game.setImage1(fileName[index]);
					}
					else if(index > 0 && index < 2) {					
						game.setImage2(fileName[index]);
					}
					else if(index > 1 && index < 3) {
						game.setImage3(fileName[index]);
					}
					else if(index > 2 && index < 4) {
						game.setImage4(fileName[index]);
					}
					else if(index > 3 && index < 5) {
						game.setImage5(fileName[index]);
					}
				}
			}
			game.setRelease_date(getToday());
			Map<String, String> map = new HashMap<String, String>();
			map.put("gameId", String.valueOf(game.getGame_id()));
			gameCatalog.updateGame(game);
			return new ModelAndView("redirect:/game/gameList.html");
		}
	}
	
	// 게임 수정 form page 호출
	@RequestMapping(value="/game/updateForm.html", method=RequestMethod.GET)
	public ModelAndView updateForm(HttpSession session, Integer GAMEID, Integer PAGENO) {
		Game game = this.gameCatalog.getGameDetail(GAMEID);
		List<Os> osList = this.gameCatalog.getOsList();
		List<Genre> genreList = this.gameCatalog.getGenreList();
		List<Grade> gradeList = this.gameCatalog.getGradeList();
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("OS_LIST", osList);
		model.put("GENRE_LIST", genreList);
		model.put("GRADE_LIST", gradeList);
		ModelAndView mav = new ModelAndView("gshop/game/gameUpdateForm");
		mav.addObject("GAME_ITEM", game);
		mav.addObject(game);
		mav.addAllObjects(model);
		return mav;
	}
	
	// 좋아요 등록 및 삭제
	@RequestMapping(value = "/game/favoriteGame.html", method = RequestMethod.GET)
	public ModelAndView favoriteGame(HttpSession session, Integer GAMEID) {
		ModelAndView mav = new ModelAndView("gshop/game/gameFavoriteResult");
		Game game = new Game();
		boolean isFavorite = false;
		if(session.getAttribute("user_key") != null) {
			game.setUser_id((String) session.getAttribute("user_key"));
		} else if(session.getAttribute("admin_key") != null) {
			game.setUser_id((String) session.getAttribute("admin_key"));
		}
		game.setGame_id(GAMEID);
		if(gameCatalog.getFavoriteCountByGameId(game) == 0) {
			this.gameCatalog.insertFavoriteGame(game);
			System.out.println(gameCatalog.getFavoriteCountByGameId(game));
			isFavorite = true;
		} else {
			this.gameCatalog.deleteFavoriteGame(game);
			System.out.println(gameCatalog.getFavoriteCountByGameId(game));
			isFavorite = false;
		}
		game.setFavorite_games(this.gameCatalog.getFavoriteCount(game));
		this.gameCatalog.updateUserFavoriteGameCount(game);
		mav.addObject("isFavorite", isFavorite);
		mav.addObject("GAME_ID", GAMEID);
		return mav;
	}
	
	// 게임 삭제(상태 변경)
	@RequestMapping(value = "/game/modifyGameStatus.html", method = RequestMethod.GET)
	public ModelAndView modifyGameStatus(HttpSession session, Integer GAMEID) {
		Game game = new Game();
		game.setStatus(this.gameCatalog.getGameStatus(GAMEID));
		game.setGame_id(GAMEID);
		if(game.getStatus() == 0) {
			game.setStatus(1);
			this.gameCatalog.modifyGameStatus(game);
		} else if(game.getStatus() == 1){
			game.setStatus(0);
			this.gameCatalog.modifyGameStatus(game);
		}
		ModelAndView mav = new ModelAndView("gshop/game/gameModifyStatusResult");
		return mav;
	}
	
	// 게임 본문 호출
	@RequestMapping(value="/game/gameDetail.html", method=RequestMethod.GET)
	public ModelAndView readDetail(HttpSession session, Integer GAMEID, Integer PAGENO) {
		ModelAndView mav = new ModelAndView("gshop/game/gameDetail");
		/*관리자 여부 확인*/
		boolean authorityAdmin = false;
		if(session.getAttribute("admin_key") != null) {
			authorityAdmin = true;
		}
		mav.addObject("AUTHORITY_ADMIN", authorityAdmin);
		Game game = this.gameCatalog.getGameDetail(GAMEID);
		mav.addObject("GAME_ITEM", game);
		mav.addObject("GAME_ID", GAMEID);
		mav.addObject("PAGE_NO", PAGENO);
		mav.addObject("TODAY", getToday());
		//찜하기 여부 확인
		boolean authorityUser = false;
		boolean isFavorite = false;
		if(session.getAttribute("user_key") != null) {
			game.setUser_id((String) session.getAttribute("user_key")); 
			authorityUser = true;
			int count = gameCatalog.getFavoriteCountByGameId(game);
			if(count != 0) {
				isFavorite = true; 
			}
		}
		mav.addObject("AUTHORITY_USER", authorityUser);
		mav.addObject("isFavorite", isFavorite);
		mav.addObject("PAGE_NO", PAGENO);
		return mav;
	}
	
	
	// 게임 등록 Action 호출
	@RequestMapping(value = "/game/putGame.html", method = RequestMethod.POST)
	public ModelAndView putGame(@Valid Game game, BindingResult result, HttpSession session) {
		if (result.getErrorCount() > 0) {
			ModelAndView mav = new ModelAndView("gshop/game/gameInputForm");
			mav.getModel().putAll(result.getModel());
			List<Os> osList = this.gameCatalog.getOsList();
			List<Genre> genreList = this.gameCatalog.getGenreList();
			List<Grade> gradeList = this.gameCatalog.getGradeList();
			Map<String, Object> model = new HashMap<String, Object>();
			model.put("OS_LIST", osList);
			model.put("GENRE_LIST", genreList);
			model.put("GRADE_LIST", gradeList);
			mav.addObject(new Game());
			mav.addAllObjects(model);
			return mav;
		}
		
		ModelAndView mav = new ModelAndView();
		if(session.getAttribute("admin_key") == null) {
			mav.addObject("/login/loginForm.html");
			return mav;
		}
		else {
			
			Object obj = gameCatalog.getMaxGameId();
			
			int gameId = 0;
			
			if(obj != null) {
				gameId = Integer.parseInt(String.valueOf(obj));
			}
			gameId++;
			game.setGame_id(gameId);
			String[] fileName = null;
			MultipartFile[] multiFile = null;
			for(int index = 0; index < 5; index++) {
				multiFile = game.getImage();
				fileName = new String[5];
				String path = null;
				OutputStream out = null;
				ServletContext context = session.getServletContext();
				if(multiFile != null) {
					fileName[index] = multiFile[index].getOriginalFilename();
					if(! fileName[index].equals("")) {
						String[] arr = fileName[index].split("\\.", 0);
						fileName[index] = gameId + "_" + getRandomString() + "." + arr[arr.length - 1];
					}
					path = context.getRealPath("/upload/game/" + fileName[index]);
					try{
						out = new FileOutputStream(path);
						BufferedInputStream bis = new BufferedInputStream(multiFile[index].getInputStream());
						byte[] buffer = new byte[8106];
						int read = 0;
						while( (read = bis.read(buffer))>0 ) {
							out.write(buffer, 0, read);
						}
						if(out != null) {
							out.close();
						}
					}
					catch(Exception e) {}
					if(index < 1) {					
						game.setImage1(fileName[index]);
					}
					else if(index > 0 && index < 2) {					
						game.setImage2(fileName[index]);
					}
					else if(index > 1 && index < 3) {
						game.setImage3(fileName[index]);
					}
					else if(index > 2 && index < 4) {
						game.setImage4(fileName[index]);
					}
					else if(index > 3 && index < 5) {
						game.setImage5(fileName[index]);
					}
				}
			}
			game.setRelease_date(getToday());
			Map<String, String> map = new HashMap<String, String>();
			map.put("gameId", String.valueOf(game.getGame_id()));
			gameCatalog.insertGame(game);
			gameCatalog.insertImages(game);
			gameCatalog.insertGameGenres(game);
			gameCatalog.createBbsTable(map);
			gameCatalog.createBbsReplyTable(map);
			return new ModelAndView("redirect:/game/gameList.html");
		}
	}
	
	// 게임 등록 폼 호출
	@RequestMapping(value = "/game/gameInputForm.html", method = RequestMethod.GET)
	public ModelAndView gameInputForm(HttpSession session) {
		Game game = new Game();
		List<Os> osList = this.gameCatalog.getOsList();
		List<Genre> genreList = this.gameCatalog.getGenreList();
		List<Grade> gradeList = this.gameCatalog.getGradeList();
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("OS_LIST", osList);
		model.put("GENRE_LIST", genreList);
		model.put("GRADE_LIST", gradeList);
		ModelAndView mav = new ModelAndView("gshop/game/gameInputForm");
		mav.addObject(game);
		mav.addAllObjects(model);
		return mav;
	}
	
	// 게임 리스트 호출
	@RequestMapping(value = "/game/gameList.html", method = RequestMethod.GET)
	public ModelAndView gameList(HttpSession session, Integer PAGENO, String SEARCH) {
		ModelAndView mav = new ModelAndView("gshop/game/gameList");
		/*로그인 확인*/
		boolean authority = false;
		if(session.getAttribute("admin_key") != null) {
			authority = true;
		}
		Condition con = new Condition();
		/*페이지 처리*/
		Integer cnt = this.gameCatalog.getGameCount();
		int pageCnt = 0;
		if (cnt == null) cnt = 0;
		else {
			pageCnt = cnt / 10;
			if (cnt % 10 > 0) pageCnt++;
		}
		mav.addObject("COUNT", pageCnt);
		/*startRow와 endRow 계산*/
		int currentPage = 0;
		if (PAGENO == null) {
			currentPage = 1;
			PAGENO = 1;
		} else {
			currentPage = PAGENO;
		}
		int startRow = 0;
		int endRow = 0;
		startRow = (currentPage - 1) * 10 + 1;
		endRow = currentPage * 10;
		con.setStartRow(startRow);
		con.setEndRow(endRow);
		mav.addObject("CURRENT_PAGE", currentPage);
		mav.addObject("PAGE_NO", PAGENO);
		/*new 처리를 위한 오늘 날짜 계산*/
		String date = getToday();
		/*리스트 DB 조회*/
		List<Game> gameList;
		if(SEARCH == null) {
			gameList = this.gameCatalog.getGameList(con);
		} else {
			con.setSearch(SEARCH);
			gameList = this.gameCatalog.getGameListBySearch(con);
		}
		
		mav.addObject("GAME_LIST", gameList);
		mav.addObject("TODAY", date);
		mav.addObject("AUTHORITY", authority);
		return mav;
	}
	
	private String getToday() {// 오늘 날짜를 계산하는 메서드
		Calendar today = Calendar.getInstance();
		String year = String.valueOf(today.get(Calendar.YEAR));
		String month = String.valueOf(today.get(Calendar.MONTH) + 1);
		if(month.length() == 1) month = "0" + month;
		String gDate = String.valueOf(today.get(Calendar.DATE));
		if(gDate.length() == 1) gDate = "0" + gDate;
		String date = String.valueOf(year + month + gDate);
		return date;
	}
	
	private String getRandomString(){
        char[] charaters = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'};
        StringBuffer sb = new StringBuffer();
        Random rn = new Random();
        for( int i = 0 ; i < 20 ; i++ ){
            sb.append( charaters[ rn.nextInt( charaters.length ) ] );
        }
        return sb.toString();
    }


	
}
