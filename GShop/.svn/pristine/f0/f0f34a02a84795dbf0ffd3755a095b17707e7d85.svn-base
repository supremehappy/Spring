package controller;



import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import logic.UserCatalog;
import model.InterestGenre;
import model.User;

@Controller
public class UserMyPageController{
   @Autowired
   private UserCatalog userCatalog;

   
   
   @RequestMapping(value="/userMyPage/userMyPage.html", method=RequestMethod.GET)
   public ModelAndView userMaPageResult(User user,HttpSession session){	  
	   
	   String user_id=(String) session.getAttribute("user_key");	  
	   user = this.userCatalog.selectUserMyPage(user_id);	   
		ModelAndView mav = new ModelAndView("gshop/user/userMyPageResult");
		session.setAttribute("USER", user);		
		return mav;
	   
	   
	}
   
   @RequestMapping(value="/userMyPage/userSelect.html",
			method=RequestMethod.GET)
	public ModelAndView userSelect(User user,HttpSession session,InterestGenre interestGenre){	   
	   
	   String user_id = (String) session.getAttribute("user_key");		   
	   
	   user = this.userCatalog.selectUser(user_id);	   
	   interestGenre.setUser_id(user_id);
	   List<InterestGenre> interest_genres=this.userCatalog.selectInterestGenre(user_id);
	   String nickname=user.getNickname();	   
	   
		ModelAndView mav = new ModelAndView("gshop/user/userUpdateForm");
		session.setAttribute("NICKNAME", nickname);
		session.setAttribute("USER_SELECT", user);	
		session.setAttribute("INTEREST_GENRES", interest_genres);			
		session.setAttribute("USER_IDUP", user_id);			
		return mav;
	}
      
   @RequestMapping(value="/userMyPage/updateUser.html",
			method=RequestMethod.POST)
  
	public ModelAndView userUpdate(@Valid User user,
		BindingResult result, HttpSession session ,InterestGenre interestGenre){
	   
	   user.setUser_id((String) session.getAttribute("user_key"));
	   
	   
		if(result.getErrorCount()>1){			
			ModelAndView mav = new ModelAndView("gshop/user/userUpdateForm");		
			mav.getModel().putAll(result.getModel());			
			System.out.println(result.getModel());
			return mav;
		}
		
		
		MultipartFile multiFile = user.getPicture_file();
		String fileName = null; String path = null;
		OutputStream out = null;
		ServletContext context = session.getServletContext();
		if(multiFile != null){//업로드 이미지가 있는 경우
			fileName = multiFile.getOriginalFilename();
			path = context.getRealPath("/upload/"+fileName);
			System.out.print(path);
			try{
				out = new FileOutputStream(path);
				BufferedInputStream bis = new BufferedInputStream(
					multiFile.getInputStream());
				byte[] buffer = new byte[8106];
				int read = 0;
				while( (read = bis.read(buffer))>0 ){
					out.write(buffer, 0, read);
				}
				if(out != null) out.close();
			}catch(Exception e){}
			user.setPicture(fileName);//이미지파일 이름 설정
		}
		
		String phone=user.getPhone();
		phone=phone.trim();	
		user.setPhone(phone);
		
		String birthday=user.getBirthday();	
		birthday=birthday.trim();	
		user.setBirthday(birthday);	
		
		
		String password=user.getPassword();
		String password2=user.getPassword2();
		if(!password.equals(password2)){			
			ModelAndView mav = new ModelAndView("gshop/user/userUpdateForm");			
			String message2 ="Password가 일치하지 않습니다.";			
			mav.addObject("message2",message2);			
			return mav;
		}		
			
		boolean nicknameUnCheck=user.isNicknameUnCheck();		
		if(nicknameUnCheck!=true){			
			ModelAndView mav = new ModelAndView("gshop/user/userUpdateForm");
			String message4 ="닉네임 중복체크를 해주세요.";			
			mav.addObject("message4",message4);			
			return mav;
		}		
		
		this.userCatalog.updateUser(user);		
		this.userCatalog.deleteInterestGenre(user);
		
		int counter=0;	
		if(interestGenre.getGenre_arr()==null){
			user.setInterest_genres(counter);
			this.userCatalog.updateInterestGenre(user);
		}else{
			int genre_arr[]=interestGenre.getGenre_arr();			
			for(int i=0; i<genre_arr.length; i++){
				String user_id =user.getUser_id();
				interestGenre.setUser_id(user_id);
				interestGenre.setGenre_id(genre_arr[i]);				
				this.userCatalog.insertInterestGenre(interestGenre);
				counter++;
			}
			user.setInterest_genres(counter);
			this.userCatalog.updateInterestGenre(user);
		}
		String user_id=user.getUser_id();
		session.setAttribute("user_key", user_id);
		ModelAndView mav = new ModelAndView("redirect:../userMyPage/userMyPage.html");		
		return mav;
	}
   
   @RequestMapping(value="/userMyPage/deleteUser.html",
			method=RequestMethod.GET)
	public ModelAndView userDelete(User user,HttpSession session){
	   
	   String user_id = (String) session.getAttribute("user_key");
	   user.setUser_id(user_id);	   
	   this.userCatalog.deleteUser(user);	   
	   session.removeAttribute("user_key");	   
	   session.removeAttribute("user_nickname");
	   session.removeAttribute("USER");
	   ModelAndView mav = new ModelAndView("gshop/main");		
	   return mav;
	}
   
   @RequestMapping(value="/userMyPage/selectUser_id.html",
			method=RequestMethod.GET)
	public ModelAndView user_idSelect(User user){
		ModelAndView mav = new ModelAndView("gshop/user/userSelectForm");		
		return mav;
	}
   
   @RequestMapping(value="/userMyPage/user_idSelectResult.html",
			method=RequestMethod.POST)
	public ModelAndView user_idSelectResult(@Valid User user, BindingResult result){
	   
	   if(result.getErrorCount()>4){
		   System.out.println(result.getErrorCount());		   
			ModelAndView mav = new ModelAndView("gshop/user/userSelectForm");			
			mav.getModel().putAll(result.getModel());			
			return mav;
		}	
		ModelAndView mav = new ModelAndView("gshop/user/userSelectResult");
		String user_id=this.userCatalog.selectUser_id(user);
		mav.addObject("USER_IDSELECT",user_id);			
		return mav;
	}
   
   @RequestMapping(value="/userMyPage/selectPassword.html",
			method=RequestMethod.GET)
	public ModelAndView selectPassword(User user){
		ModelAndView mav = new ModelAndView("gshop/user/userPasswordSelectForm");			
		return mav;
	}
   
   @RequestMapping(value="/userMyPage/userPasswordSelectResult.html",
			method=RequestMethod.POST)
	public ModelAndView selectPasswordResult(@Valid User user, BindingResult result){
	   
	   if(result.getErrorCount()>3){
		   System.out.println(result.getErrorCount());		   
			ModelAndView mav = new ModelAndView("gshop/user/userPasswordSelectForm");			
			mav.getModel().putAll(result.getModel());			
			return mav;
		}	
		ModelAndView mav = new ModelAndView("gshop/user/userPasswordSelectResult");
		String password=this.userCatalog.selectPassword(user);
		mav.addObject("PASSWORD_SELECT",password);			
		return mav;
	}
   
}
